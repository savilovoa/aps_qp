ortools machines - массив машин, в которых каждая запись это {"name": "Имя", "product_idx": индекс продукции н начальное состояние}, num_machines - количество машин, num_days - количество дней, products - массив продуктов, в которых каждая запись, это {"name": "Имя", "qty": пропорция}, num_products - количество продуктов, num_schifts - количество смен - их всегда 3. Для упрощения можно сделать дни и смены одним плоским массивом, т.е. 5 дней по 3 смены будет являться массивом дней с индексами от 0 до 14. Первая запись массива продукции, это специальный продукт - простой. Там пропорция не указана. Есть переменная jobs[m, d] = model.new_int_var-  в  котором храниться на какой машине, в какой день, какой продукт вырабатывается. Нужно добавить мягкое ограничение чтобы количество продукции было близко к пропорциям, как пример можно взять массив products = [{"name": "downtime", "qty": 0}, {"name": "p1", "qty": 5} , {"name": "p2", "qty": 3}, {"name": "p3", "qty":2}] - для данного примера пропорции будут [5,3,2]. Если на машине на следующий день планируется вырабатывать другой продукт, то нужно указать простой в 2 смены. . Соответственно в эти смены не вырабатывается никакой продукт. После простоя на машине можно вырабатывать любой продукт. Задача максимизировать выработку продукции близкой к пропорциям, причем количество простоев должно быть минимальным.  Добавить условие, чтобы не было на одной машине прыжков: к примеру если вначале 3 дня выработка продукта 3, затем 4 дня продукта 1, а потом еще 2 дня опять продукт 3. В таком случае нужно вначале 5 дней продукт 3, а 4 дня продукт 1. Т.к. у машин есть начальное состояние, то целесообразно начинать работу именно с того продукта, который указан в качестве начального, иначе нужно начинать с простоя. Делать это ограничение через последовательность неубывающих индексов нельзя, т.к. вполне возможно что индекс продукта начальное состояние на одной из машин будет равно 3 (для текущего примера, когда всего продуктов 3 + 1 простой), то получается это правило будет запрещать другие продукты, либо будет перекос по пропорции, если последний индекс имеет малое значение пропорции. И есть еще плохой сценарий: т.к. количество машин гораздо больше количества продуктов, то в принципе тяжело будет планировать с неубывающими индексами. Но возможно можно сделать с неубывающими, если корректно подготовить последовательность данных индексов, относительно пропорций и начальных состояний. Тогда действительно можно будет работать по алгоритму неубывающих индексов.


from ortools.sat.python import cp_model

def solve_production_scheduling(
    num_machines,
    num_days,
    products,
    initial_machine_states, # Новый параметр: [{"name": "Машина 1", "product_idx": 1}, ...]
    time_limit_seconds=60
):
    """
    Решает задачу планирования производства с учетом пропорций, простоев и "прыжков".

    Args:
        num_machines (int): Количество машин.
        num_days (int): Количество дней.
        products (list): Массив продуктов, где каждая запись {"name": "Имя", "qty": пропорция}.
                         Первая запись - "downtime".
        initial_machine_states (list): Массив словарей, описывающих начальное состояние каждой машины.
                                       Каждая запись: {"name": "Имя машины", "product_idx": индекс продукта}.
        time_limit_seconds (int): Максимальное время работы решателя в секундах.
    """

    model = cp_model.CpModel()

    num_shifts_per_day = 3 # Зафиксировано по условию
    total_flat_shifts = num_days * num_shifts_per_day
    num_products = len(products)

    # --- 1. Обработка данных о продуктах и машинах ---
    product_name_to_idx = {p["name"]: i for i, p in enumerate(products)}
    product_idx_to_name = {i: p["name"] for i, p in enumerate(products)}

    downtime_idx = product_name_to_idx["downtime"] # Индекс простоя всегда 0

    # Пропорции только для продуктивных продуктов
    proportions = {}
    product_indices_to_schedule = []
    for i, p in enumerate(products):
        if p["name"] != "downtime":
            proportions[i] = p.get("qty", 0) # Используем .get для безопасности, если qty пропущено
            if proportions[i] > 0:
                product_indices_to_schedule.append(i)

    total_proportional_units = sum(proportions.values())
    if total_proportional_units == 0 and len(product_indices_to_schedule) > 0:
        print("Warning: Total proportional units for active products is zero. Proportion constraint will be ignored for active products.")
    if total_proportional_units == 0 and len(product_indices_to_schedule) == 0:
        print("Warning: No active products with specified proportions. Proportion constraint will be ignored.")

    print(f"\n--- Model Setup ---")
    print(f"Total machines: {num_machines}")
    print(f"Total days: {num_days}")
    print(f"Shifts per day: {num_shifts_per_day}")
    print(f"Total flat shifts: {total_flat_shifts}")
    print(f"Product indices: {product_idx_to_name}")
    print(f"Downtime index: {downtime_idx}")
    print(f"Proportions for active products: {proportions}")
    print(f"Total proportional units: {total_proportional_units}")
    print(f"Initial machine states: {initial_machine_states}")


    # --- 2. Переменные решения ---
    # jobs[m, d_flat] = product_idx
    jobs = {}
    for m in range(num_machines):
        for d_flat in range(total_flat_shifts):
            jobs[m, d_flat] = model.new_int_var(0, num_products - 1, f'jobs_{m}_{d_flat}')

    # --- 3. Вспомогательные булевы переменные ---
    # is_downtime[m, d_flat] = True, если на машине m в смену d_flat происходит простой
    is_downtime = {}
    for m in range(num_machines):
        for d_flat in range(total_flat_shifts):
            is_downtime[m, d_flat] = model.new_bool_var(f'is_downtime_{m}_{d_flat}')
            model.add(jobs[m, d_flat] == downtime_idx).only_enforce_if(is_downtime[m, d_flat])
            model.add(jobs[m, d_flat] != downtime_idx).only_enforce_if(is_downtime[m, d_flat].not())

    # --- 4. Ограничения ---

    # 4.1. Ограничение на начальное состояние машин
    # "целесообразно начинать работу именно с того продукта, который указан в качестве начального,
    # иначе нужно начинать с простоя."
    for m in range(num_machines):
        initial_product_idx = initial_machine_states[m]["product_idx"]
        
        # Булева переменная: True, если первая смена соответствует начальному продукту
        is_first_shift_initial_product_match = model.new_bool_var(f'is_first_shift_initial_prod_match_{m}')
        
        # Если is_first_shift_initial_product_match истинно, то jobs[m, 0] должен быть initial_product_idx
        model.add(jobs[m, 0] == initial_product_idx).only_enforce_if(is_first_shift_initial_product_match)
        
        # Если is_first_shift_initial_product_match ложно, то jobs[m, 0] должен быть downtime_idx
        model.add(jobs[m, 0] == downtime_idx).only_enforce_if(is_first_shift_initial_product_match.not())


    # 4.2. Ограничение на простой при переналадке (2 смены)
    # "Если на машине на следующий день планируется вырабатывать другой продукт,
    # то нужно указать простой в 2 смены."
    # Интерпретация: Если продукт на последней смене дня D отличается от продукта на первой смене дня D+1,
    # и оба не являются простоем, то 2 смены простоя добавляются *после* первой смены нового продукта в день D+1.
    for m in range(num_machines):
        for day in range(num_days - 1): # Итерируем до num_days-2, чтобы сравнивать день D и день D+1
            # Индекс последней смены текущего дня (D)
            d_flat_curr_day_end = day * num_shifts_per_day + (num_shifts_per_day - 1)
            # Индекс первой смены следующего дня (D+1)
            d_flat_next_day_start = (day + 1) * num_shifts_per_day

            # Булева переменная: True, если продукты на границе дней отличаются
            is_prod_different_across_day = model.new_bool_var(f'prod_diff_day_{m}_{day}')
            model.add(jobs[m, d_flat_next_day_start] != jobs[m, d_flat_curr_day_end]).only_enforce_if(is_prod_different_across_day)
            model.add(jobs[m, d_flat_next_day_start] == jobs[m, d_flat_curr_day_end]).only_enforce_if(is_prod_different_across_day.not())

            # Булева переменная: True, если продукт на последней смене текущего дня не простой
            is_prev_shift_active = is_downtime[m, d_flat_curr_day_end].not()

            # Булева переменная: True, если продукт на первой смене следующего дня не простой
            is_next_shift_active = is_downtime[m, d_flat_next_day_start].not()

            # Триггер переналадки: продукты отличаются, и оба не являются простоем
            change_trigger_day = model.new_bool_var(f'change_trigger_day_{m}_{day}')
            model.add_bool_and([is_prod_different_across_day,
                                is_prev_shift_active,
                                is_next_shift_active]).only_enforce_if(change_trigger_day)

            # Если change_trigger_day истинно, то вторая и третья смены следующего дня должны быть простоем.
            # (d_flat_next_day_start + 1) и (d_flat_next_day_start + 2)
            # Проверяем, что эти смены существуют в общем плоском массиве.
            if d_flat_next_day_start + 1 < total_flat_shifts:
                model.add(jobs[m, d_flat_next_day_start + 1] == downtime_idx).only_enforce_if(change_trigger_day)
            if d_flat_next_day_start + 2 < total_flat_shifts:
                model.add(jobs[m, d_flat_next_day_start + 2] == downtime_idx).only_enforce_if(change_trigger_day)

    # 4.3. Ограничение "без прыжков" (No Jumping)
    # Последовательность активных продуктов на машине должна быть монотонно неубывающей
    # по их числовому индексу. Простой не нарушает эту последовательность.
    # last_seen_active_product[m, d_flat]: Индекс последнего *активного* продукта,
    # произведенного на машине m до или в смену d_flat. Если до d_flat активных продуктов не было, то -1.
    # Это предотвращает прыжки типа P3 -> P1 -> P3, так как после P3 нельзя будет перейти на P1.
    last_seen_active_product = {}
    for m in range(num_machines):
        for d_flat in range(total_flat_shifts):
            # Диапазон от -1 (нет активного продукта) до num_products-1
            last_seen_active_product[m, d_flat] = model.new_int_var(-1, num_products - 1, f'last_seen_active_prod_{m}_{d_flat}')

            if d_flat == 0:
                # В первую смену:
                # Если это простой, то last_seen_active_product[m,0] = -1.
                # Если это активный продукт, то last_seen_active_product[m,0] = jobs[m,0].
                # Это позволяет начальному продукту быть любым, не устанавливая ограничений на него самого,
                # а лишь на *последующие* продукты.
                model.add(last_seen_active_product[m, 0] == -1).only_enforce_if(is_downtime[m, 0])
                model.add(last_seen_active_product[m, 0] == jobs[m, 0]).only_enforce_if(is_downtime[m, 0].not())
            else:
                # Для последующих смен:
                # Если текущая смена - простой, то last_seen_active_product не меняется.
                model.add(last_seen_active_product[m, d_flat] == last_seen_active_product[m, d_flat-1]).only_enforce_if(is_downtime[m, d_flat])

                # Если текущая смена - активный продукт:
                is_active_current_shift = is_downtime[m, d_flat].not()

                # 1. Индекс текущего продукта должен быть >= индексу последнего активного продукта.
                # (Это и есть "без прыжков": нельзя вернуться к продукту с меньшим индексом после перехода на больший.)
                model.add(jobs[m, d_flat] >= last_seen_active_product[m, d_flat-1]).only_enforce_if(is_active_current_shift)

                # 2. Текущий продукт становится новым "последним активным продуктом".
                model.add(last_seen_active_product[m, d_flat] == jobs[m, d_flat]).only_enforce_if(is_active_current_shift)

    # --- 5. Переменные для подсчета и целевой функции ---

    # Общее количество смен простоя
    total_downtime_shifts = model.new_int_var(0, total_flat_shifts * num_machines, 'total_downtime_shifts')
    model.add(total_downtime_shifts == sum(is_downtime[m, d_flat] for m in range(num_machines) for d_flat in range(total_flat_shifts)))

    # Общее количество продуктивных смен
    total_production_shifts = model.new_int_var(0, total_flat_shifts * num_machines, 'total_production_shifts')
    model.add(total_production_shifts == total_flat_shifts * num_machines - total_downtime_shifts)

    # Количество смен для каждого продуктивного продукта
    product_production_shifts = {}
    for p_idx in product_indices_to_schedule:
        product_production_shifts[p_idx] = model.new_int_var(0, total_flat_shifts * num_machines, f'prod_shifts_P{p_idx}')
        prod_literals = []
        for m in range(num_machines):
            for d_flat in range(total_flat_shifts):
                is_this_product = model.new_bool_var(f'is_P{p_idx}_at_{m}_{d_flat}')
                model.add(jobs[m, d_flat] == p_idx).only_enforce_if(is_this_product)
                model.add(jobs[m, d_flat] != p_idx).only_enforce_if(is_this_product.not())
                prod_literals.append(is_this_product)
        model.add(product_production_shifts[p_idx] == sum(prod_literals))

    # Вычисление отклонения от пропорций (мягкое ограничение)
    # Максимальное значение для diff_var (для определения диапазона)
    max_diff_val_estimate = total_flat_shifts * num_machines * (total_proportional_units + max(proportions.values(), default=0))
    total_proportion_deviation_sum = model.new_int_var(
        0, max_diff_val_estimate, 'total_proportion_deviation_sum'
    )
    all_deviations = []

    if total_proportional_units > 0 and len(product_indices_to_schedule) > 0:
        # Убедимся, что total_production_shifts не равен 0, чтобы избежать деления на ноль в идеальных пропорциях
        # Хотя в CP-SAT мы используем умножение, это все равно важно для логики.
        # Если total_production_shifts == 0, то все смены - простой, и пропорции не имеют смысла.
        # В этом случае deviation должен быть 0.
        is_production_possible = model.new_bool_var('is_production_possible')
        model.add(total_production_shifts > 0).only_enforce_if(is_production_possible)
        model.add(total_production_shifts == 0).only_enforce_if(is_production_possible.not())

        for p_idx in product_indices_to_schedule:
            # Мы хотим: product_production_shifts[p_idx] / total_production_shifts ~ proportions[p_idx] / total_proportional_units
            # Перемножим: product_production_shifts[p_idx] * total_proportional_units ~ proportions[p_idx] * total_production_shifts

            lhs = product_production_shifts[p_idx] * total_proportional_units
            rhs = proportions[p_idx] * total_production_shifts

            diff_var = model.new_int_var(-max_diff_val_estimate, max_diff_val_estimate, f'diff_P{p_idx}')
            model.add(diff_var == lhs - rhs)

            abs_diff_var = model.new_int_var(0, max_diff_val_estimate, f'abs_diff_P{p_idx}')
            model.add_abs_equality(abs_diff_var, diff_var)
            all_deviations.append(abs_diff_var)

        # Сумма отклонений применяется только если есть продукция
        model.add(total_proportion_deviation_sum == sum(all_deviations)).only_enforce_if(is_production_possible)
        model.add(total_proportion_deviation_sum == 0).only_enforce_if(is_production_possible.not())
    else: # Если нет пропорций или продуктивных продуктов, отклонение всегда 0
        model.add(total_proportion_deviation_sum == 0)


    # Целевая функция: Минимизировать (простои * Вес_простоев + отклонение_пропорций * Вес_пропорций)
    # Вес простоев должен быть значительно больше, чтобы приоритет был на минимизации простоев.
    WEIGHT_DOWNTIME = 1_000_000
    WEIGHT_PROPORTION = 1

    objective_terms = [
        total_downtime_shifts * WEIGHT_DOWNTIME,
        total_proportion_deviation_sum * WEIGHT_PROPORTION
    ]
    model.minimize(sum(objective_terms))

    # --- 6. Решение и вывод результатов ---
    solver = cp_model.CpSolver()
    solver.parameters.max_time_in_seconds = time_limit_seconds
    solver.parameters.log_search_progress = True # Показывает прогресс поиска

    print(f"\n--- Solving (Time Limit: {time_limit_seconds}s) ---")
    status = solver.Solve(model)

    print(f"\n--- Solution Status ---")
    print(f"Solver status: {solver.StatusName(status)}")

    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
        print(f"Objective value: {solver.ObjectiveValue()}")
        print(f"Total downtime shifts: {solver.Value(total_downtime_shifts)}")
        print(f"Total production shifts: {solver.Value(total_production_shifts)}")
        print(f"Total proportion deviation: {solver.Value(total_proportion_deviation_sum)}")

        print(f"\n--- Production Schedule ---")
        for m in range(num_machines):
            print(f"Machine {initial_machine_states[m]['name']} (Initial Product Preference: {product_idx_to_name[initial_machine_states[m]['product_idx']]})")
            schedule_str = []
            for d_flat in range(total_flat_shifts):
                product_idx = solver.Value(jobs[m, d_flat])
                product_name = product_idx_to_name[product_idx]
                schedule_str.append(product_name)
            
            # Разделение по дням для лучшей читаемости
            daily_schedule = []
            for i in range(num_days):
                start_idx = i * num_shifts_per_day
                end_idx = start_idx + num_shifts_per_day
                daily_schedule.append(f"Day {i+1}: [{', '.join(schedule_str[start_idx:end_idx])}]")
            print(f"  {' '.join(daily_schedule)}")


        print(f"\n--- Production Summary ---")
        actual_total_production = solver.Value(total_production_shifts)
        for p_idx in product_indices_to_schedule:
            actual_shifts = solver.Value(product_production_shifts[p_idx])
            print(f"  Product {product_idx_to_name[p_idx]} (idx {p_idx}): {actual_shifts} shifts")
            if actual_total_production > 0 and total_proportional_units > 0:
                expected_ratio = proportions[p_idx] / total_proportional_units
                actual_ratio = actual_shifts / actual_total_production
                print(f"    Expected ratio: {expected_ratio:.3f}, Actual ratio: {actual_ratio:.3f}")
            else:
                 print(f"    No meaningful ratio (total production or proportional units is zero).")

    else:
        print("No solution found or time limit reached.")
        print(f"Statistics:")
        print(f"  Conflicts: {solver.NumConflicts()}")
        print(f"  Branches : {solver.NumBranches()}")
        print(f"  Wall time: {solver.WallTime()}s")


# --- Примеры использования ---

# 1. Пример с 2 машинами, 5 днями и 3 продуктами
example_products_1 = [
    {"name": "downtime"},
    {"name": "P1", "qty": 5},
    {"name": "P2", "qty": 3},
    {"name": "P3", "qty": 2},
]
# Total proportional units: 5+3+2 = 10
# P1: 5/10, P2: 3/10, P3: 2/10

example_machines_1 = [
    {"name": "Machine A", "product_idx": 1}, # P1
    {"name": "Machine B", "product_idx": 2}, # P2
]

print("\n\n--- Running Example 1 ---")
solve_production_scheduling(
    num_machines=2,
    num_days=5,
    products=example_products_1,
    initial_machine_states=example_machines_1,
    time_limit_seconds=30
)

# 2. Пример с большим количеством машин и дней, и другими пропорциями
example_products_2 = [
    {"name": "downtime"},
    {"name": "Alpha", "qty": 3},
    {"name": "Beta", "qty": 1},
    {"name": "Gamma", "qty": 2},
    {"name": "Delta", "qty": 4},
]
# Total proportions: 3+1+2+4 = 10
# Alpha: 3/10, Beta: 1/10, Gamma: 2/10, Delta: 4/10

example_machines_2 = [
    {"name": "M1", "product_idx": 1}, # Alpha
    {"name": "M2", "product_idx": 2}, # Beta
    {"name": "M3", "product_idx": 3}, # Gamma
    {"name": "M4", "product_idx": 4}, # Delta
]

print("\n\n--- Running Example 2 ---")
solve_production_scheduling(
    num_machines=4,
    num_days=10,
    products=example_products_2,
    initial_machine_states=example_machines_2,
    time_limit_seconds=120
)

# 3. Пример, где машина начинает не с "родного" продукта
# (т.е. решатель должен будет выбрать: либо начать с указанного initial_product_idx,
# либо начать с простоя, если это нужно для соблюдения пропорций или дальнейших правил.)
example_products_3 = [
    {"name": "downtime"},
    {"name": "ProdX", "qty": 1}, # idx 1
    {"name": "ProdY", "qty": 1}, # idx 2
    {"name": "ProdZ", "qty": 1}, # idx 3
]

example_machines_3 = [
    {"name": "M_Starts_X", "product_idx": 1}, # Machine M_Starts_X prefers ProdX
    {"name": "M_Starts_Y", "product_idx": 2}, # Machine M_Starts_Y prefers ProdY
    {"name": "M_Starts_Z_but_prefers_X_overall", "product_idx": 3}, # Machine M_Starts_Z prefers ProdZ, but if ProdX is needed, it might start with downtime.
]

print("\n\n--- Running Example 3 (Initial State Constraint Test) ---")
solve_production_scheduling(
    num_machines=3,
    num_days=3,
    products=example_products_3,
    initial_machine_states=example_machines_3,
    time_limit_seconds=30
)
