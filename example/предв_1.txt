import pandas as pd
import json

# Чтение и загрузка данных (уже сделано в вашем коде)
with open("test_in.json", encoding="utf8") as f:
    test_in = f.read()

data = json.loads(test_in)

# Создание DataFrame
machines_df = pd.DataFrame(data['machines'])
products_df = pd.DataFrame(data['products'])
count_days = data["count_days"]
max_daily_prod_zero = data["max_daily_prod_zero"]

# Инициализация сетки расписания
schedule_grid = [[None for _ in range(count_days)] for _ in range(len(machines_df))]

# Добавление оригинального индекса и количества продукта
machines_df.reset_index(inplace=True)
machines_df.rename(columns={'index': 'original_index'}, inplace=True)
machines_df['product_qty'] = machines_df['product_idx'].map(products_df['qty'])

# Сортировка машин и продуктов
sorted_machines_df = machines_df.sort_values(by=["type", "product_qty"], ascending=[False, True])
sorted_products_df = products_df.sort_values(by=["machine_type", "qty"], ascending=[False, False])

# Функция для проверки возможности установки перехода (prod_zero) в день
def can_place_zero(day, zeros_per_day, max_daily_prod_zero):
    return zeros_per_day.get(day, 0) < max_daily_prod_zero

# Счетчик переходов по дням
zeros_per_day = {day: 0 for day in range(count_days)}

# Основной алгоритм планирования
while len(sorted_machines_df) > 0:
    # Сортировка машин и продуктов на каждой итерации
    sorted_machines_df = sorted_machines_df.sort_values(by=["type", "product_qty"], ascending=[False, True])
    sorted_products_df = sorted_products_df.sort_values(by=["machine_type", "qty"], ascending=[False, False])
    
    # Проходим по каждой машине
    for _, machine in sorted_machines_df.iterrows():
        machine_idx = int(machine['original_index'])
        initial_product_idx = machine['product_idx']
        machine_type = machine['type']
        
        # Находим подходящий продукт для машины (тип 1 продукты только на тип 1 машины)
        available_products = sorted_products_df[
            (sorted_products_df['machine_type'] == 1) & (machine_type == 1) |
            (sorted_products_df['machine_type'] == 0)
        ]
        
        if available_products.empty:
            continue
            
        target_product = available_products.iloc[0]
        target_product_idx = target_product['idx']
        required_qty = target_product['qty']
        
        # Счетчик запланированного количества для текущего продукта
        planned_qty = 0
        
        # Планируем для текущей машины
        current_day = 0
        
        # Шаг 3: Планируем начальный продукт на первый день
        if current_day < count_days:
            schedule_grid[machine_idx][current_day] = initial_product_idx
            if initial_product_idx == target_product_idx:
                planned_qty += 1
            current_day += 1
        
        # Шаг 4: Планируем два дня перехода (prod_zero = 0)
        zeros_placed = 0
        while zeros_placed < 2 and current_day < count_days:
            if can_place_zero(current_day, zeros_per_day, max_daily_prod_zero):
                schedule_grid[machine_idx][current_day] = 0
                zeros_per_day[current_day] = zeros_per_day.get(current_day, 0) + 1
                zeros_placed += 1
                current_day += 1
            else:
                # Если нельзя поставить переход, планируем начальный продукт
                schedule_grid[machine_idx][current_day] = initial_product_idx
                if initial_product_idx == target_product_idx:
                    planned_qty += 1
                current_day += 1
        
        # Шаг 5: Планируем целевой продукт до конца дней
        while current_day < count_days:
            schedule_grid[machine_idx][current_day] = target_product_idx
            planned_qty += 1
            current_day += 1
        
        # Шаг 6-7: Обновляем количество продукта и проверяем условие
        products_df.loc[products_df['idx'] == target_product_idx, 'qty'] -= planned_qty
        
        # Если запланировали достаточно или больше, переходим к следующей машине
        if planned_qty >= required_qty:
            sorted_machines_df = sorted_machines_df[sorted_machines_df['original_index'] != machine_idx]
        else:
            # Уменьшаем требуемое количество и пересортировываем
            sorted_machines_df = sorted_machines_df[sorted_machines_df['original_index'] != machine_idx]
            products_df.loc[products_df['idx'] == target_product_idx, 'qty'] = max(0, required_qty - planned_qty)

# Вывод расписания
for machine_idx in range(len(schedule_grid)):
    print(f"Machine {machine_idx}: {schedule_grid[machine_idx]}")
	