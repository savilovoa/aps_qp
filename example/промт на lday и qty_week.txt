Модель qttools для планирования расписания
Начальные данные:
{
# машины
"machines": [
{
"idx": 0, # индекс
"name": "ТС Тойота №1", # имя
"product_idx": 3, # начальный индекс продукта
"id": "fbc4c3a0-8087-11ea-80cc-005056aab926", # id машины
"type": 0, # тип машины
"remain_day": 6 # количество дней остатка для доработки
},
{
"idx": 1,
"name": "ТС Тойота №2",
"product_idx": 3,
"id": "fbc4c3a1-8087-11ea-80cc-005056aab926",
"type": 0,
  "remain_day": 3
},
{
"idx": 2,
"name": "ТС Тойота №3",
"product_idx": 1,
"id": "fbc4c372-8087-11ea-80cc-005056aab926",
"type": 0,
  "remain_day": 2
}],
# продукты
"products": [
{
"idx": 0, # индекс
"name": "", # имя
"qty": 0, # общее количество
"id": "", # id продукта
"machine_type": 0, # тип машин 
  "qty_minus": 0, # можно планировать меньше
"lday": 0 # Минимальная партия в днях
},
{
"idx": 1,
"name": "ст87017t3 ",
"qty": 6,
"id": "7ec17dc8-f3bd-4384-9738-7538ab3dc315",
"machine_type": 0,
  "qty_minus": 0
"lday": 3
},
{
"idx": 2,
"name": "ст87416t1 ",
"qty": 30,
"id": "9559e2e8-6e72-41f8-9dba-08aab5463623",
"machine_type": 0,
  "qty_minus": 1
"lday": 2
},
{
"idx": 3,
"name": "ст2022УИСt4 ",
"qty": 84,
"id": "cd825c90-aa80-4b95-9f81-2486b871bf94",
"machine_type": 0,
  "qty_minus": 1
"lday": 4
}
],
"cleans": [],
"count_days": 21 # всего количество дней планирования
}

существующая модель для планирования продукта по слудующим критериям:
- вначале на машине дорабатывается тот продукт, который указан в начальном состоянии, на количество дней указанное в remain_day
- далее либо продолжается тот-же продукт, либо указывается переход на другой продукт длительностью 2 дня и далее планируется уже другой продукт
- для указания чистки существует специальный продукт с индексом 0 PRODUCT_ZERO
- есть ограничения на переходы - в один день не более 3-х переходов - max_daily_prod_zero
- ограничение на типы машин, для продукта с machine_type > 0 разрешены машины только type=machine_type, если machine_type = 0 то можно на любой машине
- не более одного перехода 
- если есть чистка в на машине в определенный день, то машина пропускает день производства

- мягкое ограничение - минимизировать отклонение от заданных пропорций qty
функция оптимального результата - минимум отклонений от пропорций и минимум переходов: model.Minimize(sum(proportion_objective_terms) + product_counts[PRODUCT_ZERO] * downtime_penalty)

Необходимо добавить:
1. использование длины партии lday:
	1.1 каждый продукт вырабатывается партиями длиной lday - необходимо сделать переменную в модели, которая указывает начало и окончание партии
	1.2 переход можно использовать только после окончания партии
	1.3 reamin_day - это количество остатка партии на начало периода
3. если индекс продукта на машине product_idx=0,то на ней можно начинать любой продукт

Изменения текущей модели сделать по минимуму.
Если требуется что-то уточнить, лучше спросить.

код текущей модели:
def create_model(remains: list, products: list, machines: list, cleans: list, max_daily_prod_zero: int, count_days: int):

    num_days = count_days
    num_machines = len(machines)
    num_products = len(products)

    all_machines = range(num_machines)
    all_days = range(num_days)
    all_products = range(num_products)

    proportions_input = [prop for a, prop, id, t, qm in products]
    initial_products = []
    days_to_constrain = []
    for idx, (_, product_idx, m_id, t, remain_day) in enumerate(machines):
        initial_products.append(product_idx)
        days_to_constrain.append(remain_day)

    model = cp_model.CpModel()

    jobs = {}
    work_days = []
    # Значение для отображения чистки в итоговом расписании
    for m in range(num_machines):
        for d in range(num_days):
            if (m, d) not in cleans:
                work_days.append((m, d))
                # Домен переменной: от 0 до num_products - 1
                jobs[(m, d)] = model.new_int_var(0, num_products - 1, f"job_{m}_{d}")

    PRODUCT_ZERO = 0  # Индекс "особенной" продукции

    # ------------ Подсчет общего количества каждого продукта ------------
    # Вспомогательные булевы переменные: product_produced[p, m, d] истинно, если продукт p производится на машине m в день d
    product_produced_bools = {}
    for p in all_products:
        for m, d in work_days:
            product_produced_bools[p, m, d] = model.NewBoolVar(f"product_produced_{p}_{m}_{d}")
            # Связь product_produced_bools с jobs
            model.Add(jobs[m, d] == p).OnlyEnforceIf(product_produced_bools[p, m, d])
            model.Add(jobs[m, d] != p).OnlyEnforceIf(product_produced_bools[p, m, d].Not())

    # Общее количество каждого продукта: product_counts[p]
    product_counts = [model.NewIntVar(0, num_machines * num_days, f"count_prod_{p}") for p in range(num_products)]
    for p in all_products:
        model.Add(product_counts[p] == sum(
            product_produced_bools[p, m, d] for m, d in work_days))
        # Добавляем условие НЕ МЕНЬШЕ для некоторых продуктов
        if products[p][4] == 0 and products[p][1] > 0:
            model.Add(product_counts[p] >= products[p][1])

    # Сумма PRODUCT_ZERO в смену d не более max_daily_prod_zero
    # Количество нулевого продукта по дням
    # И просто количество нулевого продукта
    for d in all_days:
        daily_prod_zero_on_machines = []
        for m in range(num_machines):
            if (m, d) in work_days:
                # Используем уже созданные product_produced_bools для эффективности
                # product_produced_bools[PRODUCT_ZERO, m, d] истинно, если на машине m в день d производится PRODUCT_ZERO
                daily_prod_zero_on_machines.append(product_produced_bools[PRODUCT_ZERO, m, d])

        # Сумма этих булевых переменных даст количество PRODUCT_ZERO в день d
        model.Add(sum(daily_prod_zero_on_machines) <= max_daily_prod_zero)

    # Ограничение по типам машин ###
    # Продукты с типом 1 могут производиться только на машинах с типом 1.
    # Продукты с типом 0 могут производиться на любых машинах.
    for p in all_products:
        # Индекс 3 в кортеже продукта - это 'machine_type'
        product_machine_type_req = products[p][3]
        if product_machine_type_req == 1:
            for m in all_machines:
                # Индекс 3 в кортеже машины - это 'type'
                machine_type = machines[m][3]
                if machine_type != 1:
                    # Эта машина не может производить данный продукт.
                    # Запрещаем назначение этого продукта на эту машину во все дни.
                    for d in all_days:
                        if (m, d) in work_days:
                            model.Add(jobs[m, d] != p)

    # Ограничения ПЕРЕХОДА
    # Переменные для отслеживания завершения двухдневного перехода
    completed_transition = {}
    is_not_zero = {}
    same_as_prev = {}
    prev_is_not_zero = {}
    prev2_is_not_zero = {}
    two_day_zero = {}
    for m in range(num_machines):
        for d in range(num_days):
            completed_transition[m, d] = model.NewBoolVar(f"completed_transition_{m}_{d}")

    remain_day = [0 for _ in range(num_machines)]
    # Ограничение для первого дня (d=0)
    for m in range(num_machines):
        initial_product = initial_products[m]
        is_initial_product = model.NewBoolVar(f"is_initial_product_{m}_0")
        is_not_zero[m, 0] = model.NewBoolVar(f"is_not_zero_{m}_0")

        if days_to_constrain[m] > 0:
            remain_day[m] += 1
            model.Add(jobs[m, 0] == initial_product)
        else:
            model.Add(jobs[m, 0] == initial_product).OnlyEnforceIf(is_initial_product)
            model.Add(jobs[m, 0] != initial_product).OnlyEnforceIf(is_initial_product.Not())
            model.Add(jobs[m, 0] == PRODUCT_ZERO).OnlyEnforceIf(is_not_zero[m, 0].Not())
            model.Add(jobs[m, 0] != PRODUCT_ZERO).OnlyEnforceIf(is_not_zero[m, 0])

            # Первый день: либо начальный продукт, либо PRODUCT_ZERO
            model.AddBoolOr([is_initial_product, is_not_zero[m, 0].Not()])

        # Устанавливаем completed_transition для дня 0
        model.Add(completed_transition[m, 0] == 0)  # Нет перехода в день 0

    # Ограничение для второго дня (d=1)
    for m in range(num_machines):
        initial_product = initial_products[m]
        is_not_zero[m, 1] = model.NewBoolVar(f"is_not_zero_{m}_1")
        model.Add(jobs[m, 1] != PRODUCT_ZERO).OnlyEnforceIf(is_not_zero[m, 1])
        model.Add(jobs[m, 1] == PRODUCT_ZERO).OnlyEnforceIf(is_not_zero[m, 1].Not())

        if days_to_constrain[m] > remain_day[m]:
            model.Add(jobs[m, 1] == initial_product)
            remain_day[m] += 1
            # Устанавливаем completed_transition для дня 1
            model.Add(completed_transition[m, 1] == 0)  # Нет перехода в день 1
        else:

            same_as_prev[m, 1] = model.NewBoolVar(f"same_as_prev_{m}_1")
            model.Add(jobs[m, 1] == jobs[m, 0]).OnlyEnforceIf(same_as_prev[m, 1])
            model.Add(jobs[m, 1] != jobs[m, 0]).OnlyEnforceIf(same_as_prev[m, 1].Not())

            prev_is_zero = model.NewBoolVar(f"prev_is_zero_{m}_1")
            model.Add(jobs[m, 0] == PRODUCT_ZERO).OnlyEnforceIf(prev_is_zero)
            model.Add(jobs[m, 0] != PRODUCT_ZERO).OnlyEnforceIf(prev_is_zero.Not())

            # Если день 0 - PRODUCT_ZERO, день 1 должен быть PRODUCT_ZERO для начала перехода
            model.Add(jobs[m, 1] == PRODUCT_ZERO).OnlyEnforceIf(prev_is_zero)

            # Если день 1 - не PRODUCT_ZERO, должен быть таким же, как день 0 (если день 0 не PRODUCT_ZERO)
            model.AddBoolOr([is_not_zero[m, 1].Not(), same_as_prev[m, 1]]).OnlyEnforceIf(prev_is_zero.Not())

            # completed_transition[m, 1] истинно, если день 0 и день 1 - PRODUCT_ZERO
            model.Add(completed_transition[m, 1] == prev_is_zero)

    # Логика переходов для дней d ≥ 2
    for m in range(num_machines):
        for d in range(2, num_days):
            initial_product = initial_products[m]
            if (m, d) not in cleans and (m, d - 1) not in cleans and (m, d - 2) not in cleans:
                pred_idx = d - 1
                pred_pred_idx = d - 2
                prev2_is_not_zero[m, d] = model.NewBoolVar(f"prev2_is_not_zero_{m}_{d}")
                model.Add(jobs[m, pred_pred_idx] != PRODUCT_ZERO).OnlyEnforceIf(prev2_is_not_zero[m, d])
                model.Add(jobs[m, pred_pred_idx] == PRODUCT_ZERO).OnlyEnforceIf(prev2_is_not_zero[m, d].Not())
            elif (m, d) in cleans:
                continue
            elif (m, d - 1) in cleans:
                pred_idx = d - 2
                pred_pred_idx = d - 3
                prev2_is_not_zero[m, d] = model.NewBoolVar(f"prev2_is_not_zero_{m}_{d}")
                model.Add(jobs[m, pred_pred_idx] != PRODUCT_ZERO).OnlyEnforceIf(prev2_is_not_zero[m, d])
                model.Add(jobs[m, pred_pred_idx] == PRODUCT_ZERO).OnlyEnforceIf(prev2_is_not_zero[m, d].Not())
            elif (m, d - 2) in cleans:
                pred_idx = d - 1
                prev2_is_not_zero[m, d] = model.NewBoolVar(f"prev2_is_not_zero_{m}_{d}")
                model.Add(prev2_is_not_zero[m, d] == 1)

            if days_to_constrain[m] > remain_day[m]:
                model.Add(jobs[m, d] == initial_product)
                remain_day[m] += 1

            is_not_zero[m, d] = model.NewBoolVar(f"is_not_zero_{m}_{d}")
            model.Add(jobs[m, d] != PRODUCT_ZERO).OnlyEnforceIf(is_not_zero[m, d])
            model.Add(jobs[m, d] == PRODUCT_ZERO).OnlyEnforceIf(is_not_zero[m, d].Not())

            prev_is_not_zero[m, d] = model.NewBoolVar(f"prev_is_not_zero_{m}_{d}")
            model.Add(jobs[m, pred_idx] != PRODUCT_ZERO).OnlyEnforceIf(prev_is_not_zero[m, d])
            model.Add(jobs[m, pred_idx] == PRODUCT_ZERO).OnlyEnforceIf(prev_is_not_zero[m, d].Not())

            # Проверяем, был ли завершен двухдневный переход
            two_day_zero[m, d] = model.NewBoolVar(f"two_day_zero_{m}_{d}")
            model.AddBoolAnd(prev_is_not_zero[m, d].Not(), prev2_is_not_zero[m, d].Not()).OnlyEnforceIf(
                two_day_zero[m, d])
            model.AddBoolOr(prev_is_not_zero[m, d], prev2_is_not_zero[m, d]).OnlyEnforceIf(
                two_day_zero[m, d].Not())

            # Устанавливаем completed_transition
            model.Add(completed_transition[m, d] == two_day_zero[m, d])

            # ### НАЧАЛО НОВОГО БЛОКА: Ограничение на повышение индекса продукта ###
            # Это ограничение срабатывает только в день `d`, когда завершился двухдневный переход,
            # что определяется переменной completed_transition[m, d].

            # 1. Находим индекс рабочего дня перед началом перехода.
            #    Переход занимал дни `pred_pred_idx` и `pred_idx`. Ищем день до `pred_pred_idx`.
            day_before_transition_start = pred_pred_idx - 1
            while day_before_transition_start >= 0 and (m, day_before_transition_start) in cleans:
                day_before_transition_start -= 1

            # 2. Применяем ограничение, только если такой день существует в расписании.
            if day_before_transition_start >= 0:
                # Переменная, указывающая на продукт до начала перехода.
                product_before = jobs[(m, day_before_transition_start)]
            else:
                product_before = initial_product

            # 3. Вводим вспомогательную переменную. Она будет истинной, если
            #    продукт до перехода не был PRODUCT_ZERO. Это нужно, чтобы
            #    избежать сравнения, если до этого уже был простой.
            product_before_is_not_zero = model.NewBoolVar(f"prod_before_not_zero_{m}_{d}")
            model.Add(product_before != PRODUCT_ZERO).OnlyEnforceIf(product_before_is_not_zero)
            model.Add(product_before == PRODUCT_ZERO).OnlyEnforceIf(product_before_is_not_zero.Not())

            # 4. Устанавливаем само ограничение.
            #    Оно должно сработать, только если (А) переход завершен И (Б) продукт до перехода не был нулевым.
            #    Существующее ограничение `model.add(jobs[m, d] != PRODUCT_ZERO).OnlyEnforceIf(completed_transition[m, d])`
            #    уже гарантирует, что jobs[m, d] не будет нулем, если переход завершен.
            model.Add(jobs[m, d] > product_before).OnlyEnforceIf(
                [completed_transition[m, d], product_before_is_not_zero]
            )

            # Ограничения:
            # Если текущий день - не ноль, то либо:
            # 1) тот же продукт, что и вчера (если вчера не ноль)
            # 2) завершен двухдневный переход
            same_as_prev[m, d] = model.NewBoolVar(f"same_as_prev_{m}_{d}")
            model.Add(jobs[m, d] == jobs[m, pred_idx]).OnlyEnforceIf(same_as_prev[m, d])
            model.Add(jobs[m, d] != jobs[m, pred_idx]).OnlyEnforceIf(same_as_prev[m, d].Not())

            model.AddBoolOr([
                is_not_zero[m, d].Not(),  # Текущий день - PRODUCT_ZERO
                same_as_prev[m, d],  # Тот же продукт, что вчера
                completed_transition[m, d]  # Завершен двухдневный переход
            ])
            # Запрет на 3-й ZERO
            model.add(jobs[m, d] != PRODUCT_ZERO).OnlyEnforceIf(completed_transition[m, d])
            # Запрет на переход в последние 2 дня
            if d >= count_days - 2:
                model.add(jobs[m, d] != PRODUCT_ZERO)

    # не более 1-го простоя за неделю
    for m in range(num_machines):
        prod_zero_on_machine = []
        for d in all_days:
            if not (m, d) in cleans:
                prod_zero_on_machine.append(product_produced_bools[PRODUCT_ZERO, m, d])
        model.Add(sum(prod_zero_on_machine) <= 2)


    # ------------ Мягкое ограничение: Пропорции продукции (для продуктов с индексом > 0) ------------
    # Цель: минимизировать отклонение от заданных пропорций
    # Пропорции касаются только продуктов p > 0.
    # Мы хотим, чтобы product_counts[p1] / product_counts[p2] было близко к proportions_input[p1] / proportions_input[p2]
    # Это эквивалентно product_counts[p1] * proportions_input[p2] ~= product_counts[p2] * proportions_input[p1]

    total_products_count = model.NewIntVar(0, num_machines * num_days, "total_products_count")
    model.Add(total_products_count == sum(product_counts[p] for p in range(1, len(products))))

    total_input_quantity = sum(proportions_input)
    logger.debug(f"total_input_quantity={total_input_quantity}")
    proportion_objective_terms = []

    for p in range(1, len(products)):  # Skip p == 0
        logger.debug(f"proportions_input[{p}]={proportions_input[p]}")

        # product_counts[p] * total_input_quantity
        term1_expr = model.NewIntVar(0, num_machines * num_days * total_input_quantity,
                                     f"term1_{p}")
        model.AddMultiplicationEquality(term1_expr, [product_counts[p], total_input_quantity])

        # total_products_count * proportions_input[p1_idx]
        term2_expr = model.NewIntVar(0, cp_model.INT32_MAX, f"term2_{p}")
        model.AddMultiplicationEquality(term2_expr, [total_products_count,
                                                     model.NewConstant(proportions_input[p])])

        # diff = term1_expr - term2_expr
        diff_var = model.NewIntVar(-cp_model.INT32_MAX, cp_model.INT32_MAX, f"diff_{p}")
        model.Add(diff_var == (term1_expr - term2_expr))
        abs_diff_var = model.NewIntVar(0, cp_model.INT32_MAX, f"abs_diff_{p}")
        model.AddAbsEquality(abs_diff_var, diff_var)
        proportion_objective_terms.append(abs_diff_var)

    downtime_penalty = round(0.1 * sum(proportions_input)/len(work_days))
    if downtime_penalty < 1:
        downtime_penalty = 1

    model.Minimize(sum(proportion_objective_terms) + product_counts[PRODUCT_ZERO] * downtime_penalty)


